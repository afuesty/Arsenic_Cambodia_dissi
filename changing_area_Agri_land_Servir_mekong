//////Cambodia ///////////
var country_names = ['Cambodia']; 

// import the country feasture collection
var countries = ee.FeatureCollection('ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw');
// find the countries in the country list
var cambodia = countries.filter(ee.Filter.inList('Country', country_names));

////////Arsenic hazard zones /////////////
var AsZonemask = Aszone.eq(1);
Aszone = Aszone.updateMask(AsZonemask);

////////////landcover typology////////////////
var classStruct = 
{ 'Other': {number: 0, color: '6f6f6f'},
  'Surface Water': {number: 1, color: 'aec3d4'},
  'Snow and Ice': {number: 2, color: 'b1f9ff'},
  'Mangrove': {number: 3, color: '111149'},
  'Flooded forest': {number: 4, color: '287463'},
  'Deciduous forest': {number: 5, color: '152106'},
  'Orchard or Plantation forest': {number: 6, color: 'c3aa69'},
  'Evergreen broadleaf alpine': {number: 7, color: '9ad2a5'},
  'Evergreen broadleaf': {number: 8, color: '7db087'},
  'Evergreen needleleaf': {number: 9, color: '486f50'},
  'Evergreen mixed forest': {number: 10, color: '387242'},
  'Mixed evergreen and deciduous': {number: 11, color: '115420'},
  'Urban and Built up': {number: 12, color: 'cc0013'},
  'Cropland': {number: 13, color: '8dc33b'},
  'Rice paddy': {number: 14, color: 'ffff00'},
  'Mudflat and intertidal': {number: 15, color: 'a1843b'},
  'Mining': {number: 16, color: 'cec2a5'},
  'Barren': {number: 17, color: '674c06'},
  'Wetlands': {number: 18, color: '3bc3b2'},
  'Grassland': {number: 19, color: 'f4a460'},
  'Shrubland': {number: 20, color: '800080'},
};

// Get list of class names, probability layer names, and palette colors
var classNamesList = getIds(classStruct);
var probNames = cleanList(classNamesList);
var classNames = ee.List(classNamesList); 
var classNumbers = getList(classStruct,'number');
var PALETTE_list = getList(classStruct,'color');

var PALETTE = PALETTE_list.join(',');

///////////////////////////////////////////////////////////////////////////////
// ADD LEGEND
///////////////////////////////////////////////////////////////////////////////
// Create the panel for the legend items.
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});

// Create and add the legend title.
var legendTitle = ui.Label({
  value: 'Legend',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
  }
});
legend.add(legendTitle);

// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
  // Create the label that is actually the colored box.
  var colorBox = ui.Label({
    style: {
      backgroundColor: '#' + color,
      // Use padding to give the box height and width.
      padding: '8px',
      margin: '0 0 4px 0'
    }
  });

  // Create the label filled with the description text.
  var description = ui.Label({
    value: name,
    style: {margin: '0 0 4px 6px'}
  });

  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')
  });
};

for (var i = 0; i < classNamesList.length; i++){
  legend.add(makeRow(PALETTE_list[i],classNamesList[i]));
}

// Add the legend to the map.
Map.add(legend);
Map.addLayer(ee.Image(lc.first()).clip(cambodia), {palette:PALETTE,min:0,max:classNamesList.length-1}, 'Land use map');

///////////////////////////////////////////////////////////////////////////////
// Function to get a list of column values from a structure
function getList(struct,column){
  return Object.keys(struct).map(function(k){
    var value = struct[k][column];
    return value;
  });
}

///////////////////////////////////////////////////////////////////////////////
// Function to get a list of ids (keys) from a structure
function getIds(struct){
  return Object.keys(struct);
}

///////////////////////////////////////////////////////////////////////////////
// Function to replace spaces with underscores in a list of strings
function cleanList(list){
  return list.map(function(name){
    return name.replace(/\s+/g,'_'); 
  });
}


for (var y = 2000; y < 2016; y++)
{

  // get the map
 var crop = ee.Image(lc.filter(ee.Filter.calendarRange(y, y, 'year')).first()).eq(13);
 var rice = ee.Image(lc.filter(ee.Filter.calendarRange(y, y, 'year')).first()).eq(14);
 var agriland = crop.add(rice);
 var lcMap = ee.Image(lc.filter(ee.Filter.calendarRange(y, y, 'year')).first()).updateMask(Aszone).updateMask(agriland);
 var area_image_agriculture = ee.Image.pixelArea().addBands(lcMap); 
 
 var reduction_results = area_image_agriculture.reduceRegion({
  reducer: ee.Reducer.sum().group({
    groupField: 1,
    groupName: 'lc' + y.toString(),
  }),
  geometry: cambodia,
  scale: 30,
  bestEffort: true,
});
print('reduction_results', reduction_results);
  /* get bounds
  var bounds = cambodia.geometry().bounds();

  Export.image.toDrive({
    image: lcMap,
    description: 'lc' + y.toString(),
    scale: 30,
    maxPixels: 1e13,
    region: bounds
  });
*/
}

